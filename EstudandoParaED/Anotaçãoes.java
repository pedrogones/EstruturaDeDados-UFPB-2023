//
public class Anota√ß√£oes {
    public static void main(String[] args) {
        
    }
}
/*
 * Como escolher o melhor algoritmo?
 * o tempo de execu√ßa√µ do codigo e memoria minima nescessaria √© a melhor forma para se escolher um algoritmo.
 *  Tempo de Execu√ß√£o:
 * Analisar o nnumero de opera√ß√µes s√£o executadas;
 * ùíè indica o tamanho da entrada
Ex: no de elementos no vetor
Ex: no de linhas de uma matriz
Ex: no de v√©rtices num grafo 
 * Algoritmos O(n) s√£o os ideais, O(n)^2 sao mais custosos.(Um algoritmo ùë∂(ùíè) √© melhor do que um ùë∂(ùíèùüê))
 * 
 * O que sao listas? Listas sao estruturas lineares de dados com informa√ß√µes referentes a um conjunto de ele-
 * mentos relacionados.
 * Vantagens da lista sequencial: acessa ao I-√©simo elemento √© imediato;
 * Algoritmo simples;
 * Desvantagens: nao usa memoria de forma eficiente -> aloca um espa√ßo finito e predeterminado;
 * Muita movimenta√ß√£o na inser√ß√£o/remo√ß√£o de elementos;
 * Usada em Listas pequenas, iner√ß√£o e remo√ß√£o no fim da lista e quando tivermos um tamanho, unico, bem definifo;
 * 
 * Aloca√ß√£o dinamica(Listas Encadeadas):
 *  sao tipos de dados cujo tamanho pode aumentar ou diminuir durante a execu√ß√£o do programa;
*      Em java cria-se um novo objeto, EX: N√≥ p; ... p=new N√≥();
 *  Numero de elementos(n√≥s) da lista pode aumentar ou diminuir dinamicamente √† medida que novos elemtos sao inseridos
 * ou removidos;
 * Vantagens: 
 *  Melhor aproveitamento de memoria;
 * Desvantagens:
 * Algoritmos sao bem mais complexos;
 * usa apontadores;
 * o acesso ao n√≥ deve ser feito de forma sequencial
 * 
 * //implementa√ß√£o:
 * cada n√≥ armaxena um conteudo do elemento e uma liga√ß√£o para o proximo n√≥
 * 
 * 
 */